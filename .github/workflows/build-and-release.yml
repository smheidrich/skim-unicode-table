name: Build and release Python package

on:
  push:
    tags:
    - "[0-9].*"

jobs:
  build_and_release_wheels_x86_64:
    runs-on: ubuntu-latest
    container:
      image: quay.io/pypa/manylinux_2_24_x86_64
    strategy:
      fail-fast: false
    steps:
    - name: Check out repo and submodule repos
      uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Cargo registry cache
      uses: actions/cache@v2
      env:
        cache-name: cache-cargo-registry
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('skim-fork/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
    - name: Install Rust
      run: |
        curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain stable -y
        echo "PATH=$HOME/.cargo/bin:$PATH" >> $GITHUB_ENV
    - name: Skim Rust build cache
      uses: actions/cache@v2
      env:
        cache-name: cache-skim-build
      with:
        path: skim-fork/target
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('skim-fork/**/*') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
    - name: Set mtime of files in skim-fork repo to mtime from git history
      run: |
        cd skim-fork;
        # from: https://serverfault.com/a/401450
        git ls-tree -r --name-only HEAD | while read filename; do
          repo_time="$(git log -1 --format="%ai" -- $filename)";
          echo "$repo_time $filename";
          touch -d "$repo_time" "$filename";
        done
    - name: Install dependencies and build wheels
      run: |
        # from: https://github.com/PyO3/setuptools-rust#build-wheelssh
        for PYBIN in /opt/python/cp{37,38,39,310}*/bin; do
          "${PYBIN}/pip" install -U setuptools wheel setuptools-rust
          "${PYBIN}/python" setup.py bdist_wheel
        done
    - name: Audit wheels
      run: |
        mv dist dist_unaudited
        mkdir dist
        for whl in dist_unaudited/*.whl; do
            auditwheel repair "$whl" -w dist/
        done
    - name: Upload wheels as artifacts
      uses: actions/upload-artifact@v2
      with:
        name: wheels
        path: |
          dist
    - name: Publish as GitHub release
      uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        files: |
          dist/*.whl
    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@master
      with:
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository_url: https://test.pypi.org/legacy/
    - name: Publish to PyPI
      if: startsWith(github.ref, 'refs/tags')
      uses: pypa/gh-action-pypi-publish@master
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
